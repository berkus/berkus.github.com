<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title></title>
		<description></description>
		<link></link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Flurry</title>
				<description>&lt;p&gt;To continue work on the structured streams transport I decided to get rid of the XDR data
representation, as well as slightly awkward boost.serialization library.&lt;/p&gt;

&lt;p&gt;Boost.serialization is very nice and robust, but it has some quirks, like not being able to
save things by value.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hell yeah&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Cannot do this&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I encountered a very nice library called &lt;a href=&quot;https://github.com/berkus/msgpack&quot;&gt;msgpack&lt;/a&gt;. It provided
quite efficient packing of small integers and looked reasonably simple.
But the C++ wrappers it provided around the C core were extremely horrendous - their main purpose
seems to be for RPC mechanisms where you define and transfer tuples of given types.
Making it serialize a bunch of simple fields and then load them back seemed extra hard.&lt;/p&gt;

&lt;p&gt;The library seems to be in transition to &lt;a href=&quot;https://gist.github.com/frsyuki/5432559&quot;&gt;msgpackv5&lt;/a&gt;
but itself doesn&#39;t support all of the features outlined there.&lt;/p&gt;

&lt;p&gt;I decided to make a simple and very dumb serializer to msgpackv5 format from the ground up.
The default implementation supports several types from ints and strings to boost::optional&lt;T&gt; and
some STL containers.&lt;/p&gt;

&lt;p&gt;If your type consists of a series of supported types, it&#39;s easy to serialize it as well, just define
two shift operators similar to how iostreams work.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flurry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iarchive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flurry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iarchive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flurry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oarchive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flurry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oarchive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my_type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It has a few downsides, which I didn&#39;t yet get to fixing:
* requires public access to value members, although you can always declare the operators as friends.&lt;/p&gt;

&lt;p&gt;It also has some nice properties:
* having defined the above, container types like std::vector&lt;my_type&gt; are automagically supported.&lt;/p&gt;

&lt;p&gt;Of course this is still work in progress and I expect it to slightly change, maybe move away from
msgpackv5 specification a bit - it seems to have some illogical cases.&lt;/p&gt;

&lt;p&gt;The current implementation is available as part of support library &lt;a href=&quot;https://github.com/berkus/libsupport&quot;&gt;here&lt;/a&gt;.
Separately &lt;a href=&quot;https://github.com/berkus/libsupport/blob/develop/include/flurry.h&quot;&gt;header&lt;/a&gt; and &lt;a href=&quot;https://github.com/berkus/libsupport/blob/develop/lib/flurry.cpp&quot;&gt;implementation&lt;/a&gt; files. &lt;a href=&quot;https://github.com/berkus/libsupport/blob/develop/tests/test_flurry.cpp&quot;&gt;Unit test&lt;/a&gt; shows how to use it. And the &lt;a href=&quot;https://github.com/berkus/libsupport/blob/develop/doc/flurry_serialization.txt&quot;&gt;spec&lt;/a&gt; will have the latest details about the data format.&lt;/p&gt;
</description>
				<pubDate>Sun, 08 Sep 2013 00:00:00 +0300</pubDate>
				<link>/post/2013/09/08/flurry</link>
				<guid isPermaLink="true">/post/2013/09/08/flurry</guid>
			</item>
		
			<item>
				<title>Compiling LLVM trunk</title>
				<description>&lt;p&gt;Just a very simple thing to try and build Clang with polly, LLVM, libcxx, lldb and lld from trunk. Isn&#39;t it?&lt;/p&gt;

&lt;p&gt;Using git, because cloning a git repo with full history is still faster than checking out svn repo with serf. Yay!&lt;/p&gt;

&lt;p&gt;These instructions are not for copy-paste, they show general idea and should work with minor changes.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; mkdir workspace &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;workspace
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git clone http://llvm.org/git/llvm.git
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;llvm/tools
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git clone http://llvm.org/git/clang.git
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;clang/tools
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git clone http://llvm.org/git/clang-tools-extra.git
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../.. &lt;span class=&quot;c&quot;&gt;# back in llvm/tools&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git clone http://llvm.org/git/polly.git
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git clone http://llvm.org/git/lld.git
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git clone http://llvm.org/git/lldb.git
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../.. &lt;span class=&quot;c&quot;&gt;# back in workspace&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git clone http://llvm.org/git/libcxx.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install cloog for polly. This is as per polly&#39;s installation instructions.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./llvm/tools/polly/utils/checkout_cloog.sh workspace/cloog-src
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;workspace/cloog-src
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ./configure --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/berkus/Tools/cloog
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apply some patches that I had to do to make things build nicely.&lt;/p&gt;

&lt;p&gt;They are here:
&lt;a href=&quot;http://llvm.org/bugs/show_bug.cgi?id=16123&quot;&gt;libc++ patch&lt;/a&gt; |
&lt;a href=&quot;http://llvm.org/bugs/show_bug.cgi?id=16124&quot;&gt;compiler-rt OSX patch&lt;/a&gt; |
&lt;a href=&quot;http://llvm.org/bugs/show_bug.cgi?id=16125&quot;&gt;lldb patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now create a build configuration:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; mkdir workspace/llvm/_build_
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;llvm/_build_
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; cmake -G Ninja -DCMAKE_BUILD_TYPE&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Release -DCMAKE_INSTALL_PREFIX&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/berkus/Tools/clang-git -DCMAKE_PREFIX_PATH&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/berkus/Tools/cloog/ -DCMAKE_CXX_FLAGS&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;-std=c++11 -stdlib=libc++&amp;quot;&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then build everything. This shall build around three thousand files, excluding libc++ which is built separately.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ninja
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Grab a coffee and watch ninjas in action for a while.&lt;/p&gt;

&lt;p&gt;Now build libc++. I opted to install it to a separate directory ... TODO: figure out default clang search paths for libc++ and install there..&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;workspace/libcxx/_build_
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; cmake -G Ninja -DCMAKE_INSTALL_PREFIX&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/opt/libcxx ..
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; ninja install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will still need some DYLD_LIBRARY_PATH tweaking (for lldb), but in general clang should work. It will not work with OSX default libc++; that&#39;s why you need to build a fresher one.&lt;/p&gt;
</description>
				<pubDate>Thu, 23 May 2013 00:00:00 +0300</pubDate>
				<link>/post/2013/05/23/compiling-llvm-trunk</link>
				<guid isPermaLink="true">/post/2013/05/23/compiling-llvm-trunk</guid>
			</item>
		
			<item>
				<title>c++11</title>
				<description>&lt;p&gt;New C++ is like a totally new language with tides of new and interesting stuff, like universal initializer syntax (which is not entirely universal), finally a memory model with threads, concurrent accesses, atomics and all things so dearly missed for the past ten years.&lt;/p&gt;

&lt;p&gt;And on top of that - a wonderfully fast adoption by the compilers. Within 2 years of standard publication msvc, g++ and clang are close to implementing every new bit of the it. Clang, for example, &lt;a href=&quot;http://clang.llvm.org/cxx_status.html&quot;&gt;supports all the relevant bits of c++11&lt;/a&gt; and also began supporting features from the upcoming c++1y.&lt;/p&gt;

&lt;p&gt;To the proclaimers of C++ death - it&#39;s alive and kicking, more than ever, and doing it fast and in style.&lt;/p&gt;
</description>
				<pubDate>Fri, 26 Apr 2013 00:00:00 +0300</pubDate>
				<link>/post/2013/04/26/c%2B%2B</link>
				<guid isPermaLink="true">/post/2013/04/26/c%2B%2B</guid>
			</item>
		
			<item>
				<title>btsync - good news or bad news</title>
				<description>&lt;p&gt;&lt;a href=&quot;http://labs.bittorrent.com/experiments/sync.html&quot;&gt;Here&#39;s a new technology from BitTorrent&lt;/a&gt; that might be bad news because I&#39;m working on about the same features in MettaNode and at the same time might be good news because my implementation is going to be open source from the start, and I still plan to use less of so-called servers in the infrastructure. But for the much loved p2p world it&#39;s absolutely awesome, &lt;em&gt;gone to install and play with it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Eat this, you cloud!&lt;/p&gt;

&lt;p&gt;PS. OSX client is pretty unstable, crashes, loses added folders, but that&#39;s apparently a beta.&lt;/p&gt;
</description>
				<pubDate>Thu, 25 Apr 2013 00:00:00 +0300</pubDate>
				<link>/post/2013/04/25/btsync</link>
				<guid isPermaLink="true">/post/2013/04/25/btsync</guid>
			</item>
		
			<item>
				<title>Libssu or where to go from SST?</title>
				<description>&lt;p&gt;In the mean time, I&#39;m slowly rewriting Bryan Ford&#39;s SST (Structured Streams Transport) library, using modern C++ and boost.asio, in the hopes that it will be easier to port to Metta. I called it libssu (Structured Streams Unleashed).&lt;/p&gt;

&lt;p&gt;As this work progresses I also plan to enter the description of this protocol into an RFC document, so there will be some reference point for alternative implementations. Current progress is available in &lt;a href=&quot;https://github.com/berkus/mettanode/tree/feature/ssu&quot;&gt;features/ssu&lt;/a&gt; branch on github. When it is functionally on par with existing sst, it will be merged to develop and further mettanode development will be built around this implementation.&lt;/p&gt;

&lt;p&gt;I&#39;d like to take the chance to thank Aldrin D&#39;Souza for his excellent &lt;a href=&quot;http://aldrin.co/crypto-primitives.html&quot;&gt;C++ wrapper around openssl crypto functions&lt;/a&gt;. He kindly licensed it for free use under BSD License.&lt;/p&gt;
</description>
				<pubDate>Wed, 24 Apr 2013 00:00:00 +0300</pubDate>
				<link>/post/2013/04/24/libssu</link>
				<guid isPermaLink="true">/post/2013/04/24/libssu</guid>
			</item>
		
			<item>
				<title>C++ Grandmaster Certification</title>
				<description>&lt;p&gt;New compilers course, this time in implementing the entire C++11 compiler from scratch by the standard. Really exciting excercise if you want to learn how compilers work, how to implement standards-compliant stuff. And all in all amazingly good training for my getting rusty C++ skills.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cppgm.org&quot;&gt;Check here&lt;/a&gt; and sign up for next year&#39;s round.&lt;/p&gt;

&lt;p&gt;Another excercise in the next post.&lt;/p&gt;
</description>
				<pubDate>Wed, 24 Apr 2013 00:00:00 +0300</pubDate>
				<link>/post/2013/04/24/cppgm</link>
				<guid isPermaLink="true">/post/2013/04/24/cppgm</guid>
			</item>
		
			<item>
				<title>April Fools or?</title>
				<description>&lt;p&gt;What did this neanderthal think?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qt4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QtCore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qsharedpointer_impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;595&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;uninitialized&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;used&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Werror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wuninitialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QWeakPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAndRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                          &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Apparently, getAndRef() is static; but Qt is full of such questionable style &quot;cowboy&quot; programming.&lt;/p&gt;
</description>
				<pubDate>Mon, 01 Apr 2013 00:00:00 +0300</pubDate>
				<link>/post/2013/04/01/april-fools-or</link>
				<guid isPermaLink="true">/post/2013/04/01/april-fools-or</guid>
			</item>
		
			<item>
				<title>file sharing design considerations</title>
				<description>&lt;p&gt;Some issues that need tackling in design of file sharing (see &lt;a href=&quot;http://forum.osdev.org/viewtopic.php?p=220878#p220878&quot;&gt;Brendan&#39;s post here&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;The issue of trust: right now, the file is only distributed across a range of devices you manually allow to access your data. This doesn&#39;t solve the problem per se, but just makes it easier to tackle for the initial implementation. The data and metadata could be encrypted with asymmetric schemes (private keys), but that doesn&#39;t give full security.&lt;/p&gt;

&lt;p&gt;The issue of overhead: using automatic deduplication on a block level (if people share the same file using the same block size, chances are all the blocks will match up, and hence need to be stored only once. If there are minor modifications, then only some blocks would mismatch while other are perfectly in sync, and this means much less storage overhead).&lt;/p&gt;

&lt;p&gt;Redundancy: This also gives possibility to spread out the file blocks to other nodes more evenly, with an encoding scheme allowing error correction file may be reconstructed even if some of its blocks are lost completely.&lt;/p&gt;

&lt;p&gt;Plausible deniability: if your file is not stored in a single place as a single blob, it becomes much harder to prove you have it.&lt;/p&gt;

&lt;p&gt;File metadata (name, attributes, custom labels) is also stored in a block, usually much smaller in size, which can be unencrypted to allow indexing, but could also be encrypted if you do not want to expose this metadata. In my design metadata is a key-value store with a lot of different attributes ranging from UNIX_PATH=/bin/sh to DESCRIPTION[en]=&quot;Bourne Shell executable&quot; to UNIX_PERMISSIONS=u=rwx,g=rx,o=rx and so on. This format is not fixed, although it follows a certain schema/onthology. It allows &quot;intelligent agents&quot; or bots to crawl this data and enrich it with suggestions, links, e.g. a bot crawling an mp3 collection and suggesting proper tags - it could also find higher quality versions of the file, for example.&lt;/p&gt;

&lt;p&gt;All this revolves around the ideas of DHTs, darknets, netsukuku and zeroconf. Still early on in the implementation to uncover all the details - they might change.&lt;/p&gt;
</description>
				<pubDate>Thu, 21 Mar 2013 00:00:00 +0200</pubDate>
				<link>/post/2013/03/21/fileshare</link>
				<guid isPermaLink="true">/post/2013/03/21/fileshare</guid>
			</item>
		
			<item>
				<title>added rss feed</title>
				<description>&lt;p&gt;Added RSS feed for those among us who still use it (hi, GReader). Do tell if something doesn&#39;t work for you - it was a quick job with a single jekyll file from &lt;a href=&quot;https://github.com/snaptortoise/jekyll-rss-feeds&quot;&gt;snaptortoise/jekyll-rss-feeds&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Wed, 20 Mar 2013 00:00:00 +0200</pubDate>
				<link>/post/2013/03/20/added-rss</link>
				<guid isPermaLink="true">/post/2013/03/20/added-rss</guid>
			</item>
		
			<item>
				<title>added disqus comments</title>
				<description>&lt;p&gt;Added disqus comments support on all pages as an experiment, lets see how it goes.&lt;/p&gt;

&lt;p&gt;Also copied the &lt;a href=&quot;/post/2011/06/07/metta-mmu-module-init/&quot;&gt;MMU init page&lt;/a&gt; from PDF file into markdown - it looks much better now!&lt;/p&gt;
</description>
				<pubDate>Sat, 29 Dec 2012 00:00:00 +0200</pubDate>
				<link>/post/2012/12/29/added-disqus</link>
				<guid isPermaLink="true">/post/2012/12/29/added-disqus</guid>
			</item>
		
			<item>
				<title>assocfs note</title>
				<description>&lt;p&gt;While I&#39;m still dabbling with fixing some SST issues here and there I thought I&#39;d post an old excerpt from assocfs design document.&lt;/p&gt;

&lt;p&gt;This is something that I&#39;m doing with my assocfs.&lt;/p&gt;

&lt;p&gt;It&#39;s a non-hierarchical filesystem - in other words, associative filesystem. It&#39;s basically a huge graph database. Every object is addressed by its hash (content addressable, like git), knowing the hash you can find it on disk. For more conventional searches (for those who does not know or does not care about the hash) there is metadata - attributes, drawn from an ontology and associated with a particular hashed blob.&lt;/p&gt;

&lt;p&gt;This gives a few interesting properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Same blobs will end up in the same space, giving you a for-free deduplication.&lt;/li&gt;
&lt;li&gt;Implementing versioning support is a breeze - changing the blob changes the hash, so it will end up in some other location.&lt;/li&gt;
&lt;li&gt;Some other things you may easily imagine.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It also has some problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No root directory, but a huge attribute list instead. This requires some efficient search and filtering algorithms as well as on-disk and in-memory compression of these indexes. Imagine 1,000,000 &quot;files&quot; each with about 50 attributes. Millions and millions of attributes which you have to search through.
Luckily, databases is a very well established field and building an efficient storage and retrieval on this basis is possible.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As a user you basically perform searches on attribute sets using something like humane representation of relational algebra. Blobs can have more conventional names, specified with extra attributes, for example: UNIX_PATH=/bin/bash UNIX_PATH=/usr/bin/bash allows single piece of code to be addressed by UNIX programs as both /bin/bash and /usr/bin/bash, without needing any symlinks.&lt;/p&gt;

&lt;p&gt;You can assign absolutely any kind of attributes to blobs, the actual rules for assigning are specified in the ontology dictionary, which is part of the filesystem and grows together with it (e.g. installed programs may add attribute types to blobs). Security labels are also assigned to blobs that way.&lt;/p&gt;

&lt;p&gt;Attributes &quot;orient&quot; blobs in filesystem space - without attributes the blobs are practically invisible, unless you happen to know their hash exactly. They also form a kind of semantic net between blobs giving a lot of information about their semantical meaning to the user and other subsystems.&lt;/p&gt;

&lt;p&gt;Since recalculating hashes for entire huge files would be troublesome, the files are split up in up to hundreds of smaller chunks, which are hashed independently and collected into a &quot;record&quot; object, similar to a git tree. Changing one chunk therefore requires rehashing only two much smaller objects, rather than entire huge file.&lt;/p&gt;

&lt;p&gt;Changes to the filesystem may be recorded into a &quot;change&quot; object, similar to a git commit, which may be cryptographically signed and used for securely syncing filesystem changes between nodes.&lt;/p&gt;
</description>
				<pubDate>Mon, 24 Dec 2012 00:00:00 +0200</pubDate>
				<link>/post/2012/12/24/assocfs-note</link>
				<guid isPermaLink="true">/post/2012/12/24/assocfs-note</guid>
			</item>
		
			<item>
				<title>NAT update</title>
				<description>&lt;p&gt;Turns out the problem was on the server side setup. After moving the server to Amazon EC2 cloud and
setting up UDP firewall rules punching started working. At least that takes some burden off my shoulders.
The regserver connection is not very robust, that should probably be modified to force-reconnect the session
once you open the search window again.&lt;/p&gt;

&lt;p&gt;UPnP has interesting effect on Thomson TG784 - all UDP DNS traffic ceases on other machines, rendering name
resolution unusable, unless I force it to use TCP. Not yet sure if this is result of my incorrect use of it
or this is by design in Thomson. Skype and uTorrent seem to punch holes just fine, so it should be me.
For now I just turned UPnP off in the released code and will experiment with it more.&lt;/p&gt;
</description>
				<pubDate>Sun, 09 Dec 2012 00:00:00 +0200</pubDate>
				<link>/post/2012/12/09/nat-update</link>
				<guid isPermaLink="true">/post/2012/12/09/nat-update</guid>
			</item>
		
			<item>
				<title>NAT woes</title>
				<description>&lt;p&gt;There&#39;s a slight fault with metta-grabber not quite punching through home routers&#39; NAT. While the UDP punching technique described by Bryan Ford should generally work, it doesn&#39;t account for the port change hence the announced endpoint addresses as seen by the regserver are invalid. Responses don&#39;t go back because the reply port number is different from what router&#39;s NAT assigns.&lt;/p&gt;

&lt;p&gt;I tried using UPnP to open some more ports, but it doesn&#39;t change the fact that advertised endpoints are still invalid. Now the upcoming change is to record external IP and port of the instance as reported by the router&#39;s UPnP protocol into yet another endpoint and forward that to the regserver. Another nice addition would be to enable Bonjour discovery of the nodes on the local network, which hopefully would already be connected to the regserver and can forward our endpoint information.&lt;/p&gt;

&lt;p&gt;As usual, on the New Years Eve there&#39;s a lot of different projects coming up simultaneously and grinding any progress to a halt. Watch the commits on github.&lt;/p&gt;
</description>
				<pubDate>Sat, 01 Dec 2012 00:00:00 +0200</pubDate>
				<link>/post/2012/12/01/nat-woes</link>
				<guid isPermaLink="true">/post/2012/12/01/nat-woes</guid>
			</item>
		
			<item>
				<title>On patents</title>
				<description>&lt;blockquote&gt;&lt;p&gt;Over time I’ve come to believe that software should not be patentable; most any idea in software is something that a moderately experienced programmer could invent, and the definition of patents requires that patents be non-obvious. Nuff said.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.codeofhonor.com/blog/the-making-of-warcraft-part-3&quot;&gt;Patrick Wyatt&lt;/a&gt;&lt;/strong&gt; of Blizzard&lt;/p&gt;
</description>
				<pubDate>Mon, 12 Nov 2012 00:00:00 +0200</pubDate>
				<link>/post/2012/11/12/on-patents</link>
				<guid isPermaLink="true">/post/2012/11/12/on-patents</guid>
			</item>
		
			<item>
				<title>Migrated to GitHub</title>
				<description>&lt;p&gt;I&#39;ve moved things from tumblr to github. It is not finished yet (tags remain unavailable, for example), but majority of things work and I like the github&#39;s approach to managing the content - I can write wherever I want and then simply git push it to the blog. Magic!&lt;/p&gt;

&lt;p&gt;I also made a landing page at &lt;a href=&quot;http://blog.exquance.com&quot;&gt;blog.exquance.com&lt;/a&gt; more verbose, not just a list of posts. Hope it better conveys what I want to achieve and why this blog is here.&lt;/p&gt;

&lt;p&gt;Now I&#39;m off to fix some mettanode regserver issues (you can keep track of mettanode plans &lt;a href=&quot;https://github.com/berkus/mettanode/blob/develop/ui/doc/TODO&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
</description>
				<pubDate>Sat, 10 Nov 2012 00:00:00 +0200</pubDate>
				<link>/post/2012/11/10/migrated</link>
				<guid isPermaLink="true">/post/2012/11/10/migrated</guid>
			</item>
		
			<item>
				<title>Events interface</title>
				<description>&lt;p&gt;I&#39;ve ported events, sequencers and event-based communication primitives from Nemesis. It&#39;s a little bit messy at the moment (mostly because of mixing C and C++ concepts in one place), but I&#39;m going to spend the autumn time on cleaning it up and finishing the dreaded needs_boot.dot dependencies to finally bootstrap some domains and perform communication between them. Obviously, the shortest term plan is timer interrupt, primitive kernel scheduler which activates domains and events to move domains between blocked and runnable queues.&lt;/p&gt;

&lt;p&gt;There&#39;s some interesting theory behind using events as the main synchronization mechanism, described &lt;a href=&quot;http://research.microsoft.com/pubs/72910/UCAM-CL-TR-361.pdf&quot;&gt;here&lt;/a&gt; in more detail.&lt;/p&gt;

&lt;p&gt;For the vacation time I&#39;ve printed some ANSA documents, which define architectural specifications for distributed computation systems and is very invaluable source of information for designing such systems. The full list of available ANSA documents can be found &lt;a href=&quot;http://www.ansa.co.uk/ANSATech/ANSAhtml/&quot;&gt;here&lt;/a&gt;. Good reading.&lt;/p&gt;
</description>
				<pubDate>Wed, 15 Aug 2012 00:00:00 +0300</pubDate>
				<link>/post/2012/08/15/events-interface</link>
				<guid isPermaLink="true">/post/2012/08/15/events-interface</guid>
			</item>
		
			<item>
				<title>Graphic dependency resolution</title>
				<description>&lt;p&gt;I needed to quickly check how much of Nemesis support has to be ported over before I can start launching some basic domains.&lt;/p&gt;

&lt;p&gt;I used a simple shell one-liner to extract NEEDS dependencies from the interface files. It&#39;s easy to do in Nemesis because of explicit NEEDS clause in each interface (would be nice to add this functionality to meddler, it also has the dependency information available).&lt;/p&gt;

&lt;p&gt;Here&#39;s the shell one-liner: &lt;code&gt;echo &quot;digraph {&quot;; find . -name *.if -exec grep -H NEEDS {} \; | grep -v &quot;\-\-&quot; | sed s/ *NEEDS //g | sed s@^\./@@ | sed s/\.if// | awk -F: {print $1, &quot;-&amp;gt;&quot;, $2}; echo &quot;}&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This generated a huge &lt;a href=&quot;http://downloads.exquance.com/metta/needs_full.png&quot;&gt;graphic&lt;/a&gt; with all dependencies, which I then filtered a bit by removing unreferenced entities and culling iteration after iteration.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://downloads.exquance.com/metta/needs_boot.png&quot;&gt;resulting graphic&lt;/a&gt; is much smaller and additionally has a hand-crafted legend (green - leaf nodes, yellow - direct dependencies of DomainMgr and VP, my two interfaces of interest). This shows I need to work on about 10-12 interface implementations to be able to run domains.&lt;/p&gt;

&lt;p&gt;And my ticket tracker of choice, bugs-everywhere now has an entry 7df/0fe &#39;Generate dot files with dependency information in meddler&#39;. Time to sleep.&lt;/p&gt;
</description>
				<pubDate>Mon, 16 Jul 2012 00:00:00 +0300</pubDate>
				<link>/post/2012/07/16/graphic-dependency-resolution</link>
				<guid isPermaLink="true">/post/2012/07/16/graphic-dependency-resolution</guid>
			</item>
		
			<item>
				<title>The real romance is out ahead and yet to come.</title>
				<description>&lt;blockquote&gt;&lt;p&gt;The real romance is out ahead and yet to come. The computer revolution hasn&#39;t started yet. Don&#39;t be misled by the enormous flow of money into bad defacto standards for unsophisticated buyers using poor adaptations of incomplete ideas.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Alan Kay&lt;/strong&gt; via folklore.org&lt;/p&gt;
</description>
				<pubDate>Fri, 13 Jul 2012 00:00:00 +0300</pubDate>
				<link>/post/2012/07/13/the-real-romance-is-out-ahead-and-yet-to-come-the-computer-revolution-hasnt-star</link>
				<guid isPermaLink="true">/post/2012/07/13/the-real-romance-is-out-ahead-and-yet-to-come-the-computer-revolution-hasnt-star</guid>
			</item>
		
			<item>
				<title>Brief update on Metta</title>
				<description>&lt;p&gt;I&#39;ve been working on toolchain building script, now at least on Macs it&#39;s possible to build a standalone toolchain for building Metta and you can download it and try to build it yourself. All necessary details are descibed on &lt;a href=&quot;https://github.com/berkus/metta/blob/master/README.md&quot;&gt;SourceCheckout wiki page&lt;/a&gt;. There is followup work to remove dependency on binutils and gcc (gcc will probably go first, then once lld is mature enough I could get rid of ld/gold).&lt;/p&gt;

&lt;p&gt;Another update is about type system. The operations on type system are implemented now, I can successfully register type information and query it - some examples of that are in the recently released iso image R925. Next up is fixing some of naming context operations so I can actually create and operate hierarchical naming contexts.&lt;/p&gt;
</description>
				<pubDate>Fri, 13 Jul 2012 00:00:00 +0300</pubDate>
				<link>/post/2012/07/13/brief-update-on-metta</link>
				<guid isPermaLink="true">/post/2012/07/13/brief-update-on-metta</guid>
			</item>
		
			<item>
				<title>Type systems and introspection</title>
				<description>&lt;p&gt;Since I&#39;ve decided to approach the system development from both low-level and high-level perspectives, one of the applications I have in mind for demo purposes is a little console tool which lets you activate various parts of the system, list available services and call operations on available interfaces.&lt;/p&gt;

&lt;p&gt;Imagine a little tool that allows you to pick a video file, seek it to a particular time and play it frame by frame, then run face recognition on each frame and make a database of recognized faces. Being able to make such applications &quot;mashup style&quot; by just fiddling with text and pictures in the command line should enable people to create more and more interesting tools from the basic building blocks presented by the system.&lt;/p&gt;

&lt;p&gt;This tool would need to inspect installed interfaces and types of the running components and be able to construct calls to these components directly from the command line. This requires introspection, or the ability to describe structure of objects in the system.&lt;/p&gt;

&lt;p&gt;At the moment I&#39;m working on the extension of meddler that allows to generate introspection data from the interface IDL. It is generally simple and then the next step would be to somehow register this information in the system when a new interface type is introduced. This is harder and requires some design effort. In the first approach of course only boot image is loaded, so registering types is very simple.&lt;/p&gt;

&lt;p&gt;Next up is actual introspection interface - how to know what format a particular data type is and how to marshal/unmarshal it for the purpose of interchange and operations calls on interfaces.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://hackpad.com/TG6xM5Wxz6u#Metta---mashable-techdemo-storyboard&quot;&gt;this little&lt;/a&gt; script for the possible demo storyboard.&lt;/p&gt;
</description>
				<pubDate>Thu, 14 Jun 2012 00:00:00 +0300</pubDate>
				<link>/post/2012/06/14/type-systems-and-introspection</link>
				<guid isPermaLink="true">/post/2012/06/14/type-systems-and-introspection</guid>
			</item>
		
			<item>
				<title>Museum of Endangered Sounds</title>
				<description>&lt;p&gt;&lt;a href=&quot;http://savethesounds.info/&quot;&gt;Museum of Endangered Sounds&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hehe, this is truly amazing museum! The best I&#39;ve seen lately.&lt;/p&gt;
</description>
				<pubDate>Sun, 03 Jun 2012 00:00:00 +0300</pubDate>
				<link>/post/2012/06/03/museum-of-endangered-sounds</link>
				<guid isPermaLink="true">/post/2012/06/03/museum-of-endangered-sounds</guid>
			</item>
		
			<item>
				<title>New classes</title>
				<description>&lt;p&gt;I took three more classes (actually, I took a lot more this time, but they all fell off, still hope to at least watch the videos).&lt;/p&gt;

&lt;p&gt;So here&#39;s the breakdown:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.udacity.com/course/cs212&quot;&gt;Udacity CS212&lt;/a&gt; - Design of Computer Programs - a bit boring for me, I usually do all the same stuff as my daily job. Might be interesting to people new in the craft.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.udacity.com/course/cs387&quot;&gt;Udacity CS387&lt;/a&gt; - Applied Cryptography - very interesting one, enjoying the theory and application equally.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://coursera.org/compilers&quot;&gt;Coursera Compilers&lt;/a&gt; - Compilers (ha!) - extremely interesting, very practical and exciting course. I&#39;m kinda skipping the quizzes - they are too theoretical and not very interesting, but spend most of my time on actually implementing the lexer and parser and in the future hopefully some code generation and optimizations as well. So far, my favourite course.&lt;/p&gt;
</description>
				<pubDate>Mon, 14 May 2012 00:00:00 +0300</pubDate>
				<link>/post/2012/05/14/new-classes</link>
				<guid isPermaLink="true">/post/2012/05/14/new-classes</guid>
			</item>
		
			<item>
				<title>Sending network packets</title>
				<description>&lt;p&gt;A little sidetrack into the world of PCI probing and NE2000 network card emulation.&lt;/p&gt;

&lt;p&gt;Wanted to have a taste of sending and receiving network packets inside my little OS, so I went and implemented PCI scanning (extremely simple) and NE2000 card driver (fairly simple too, their doc is quite good although misses some crucial points).&lt;/p&gt;

&lt;p&gt;So, after some fiddling I was able to send a packet and receive it through the bochs virtual network card. I&#39;ve then connected bochs to the host network card and stared at network packets for a while. Cool stuff.&lt;/p&gt;

&lt;p&gt;Here&#39;s the screen dump of the sent and then received broadcast packet.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;IRQ11 enabled.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Finished initializing NE2000 with MAC b0:c4:20:00:00:00.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Received irq: 0x0000000b&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Packet transmitted.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Packet received.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Received packet with status 33 of length 68, next packet at 82&lt;/span&gt;

&lt;span class=&quot;go&quot;&gt;0x004f0064  ff ff ff ff ff ff 28 cf  da 00 99 f5 00 10 48 65  ......(.......He&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0x004f0074  6c 6c 6f 20 6e 65 74 20  77 6f 72 6c 64 21 00 00  llo net world!..&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0x004f0094  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



</description>
				<pubDate>Fri, 11 May 2012 00:00:00 +0300</pubDate>
				<link>/post/2012/05/11/sending-network-packets</link>
				<guid isPermaLink="true">/post/2012/05/11/sending-network-packets</guid>
			</item>
		
			<item>
				<title>sjlj and exception handling</title>
				<description>&lt;p&gt;Of course, the clang&#39;s implementation of setjmp is very generic and uses quite an abstraction of program state, which makes it hardly suitable for the ad-hoc local exception support I&#39;m using. Since my requirements for setjmp were quite simple (just give me back my damn registers and stack frame), I went and implemented a very custom-tailored versions
__sjljeh_setjmp and __sjljeh_longjmp which do just what I need.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://github.com/berkus/metta/blob/master/src/runtime/setjmp.s&quot;&gt;that stuff&lt;/a&gt; out of the way, my entire boot sequence now works and I can finally fiddle with more interesting stuff. Type system and introspection, here we go.&lt;/p&gt;
</description>
				<pubDate>Sun, 08 Apr 2012 00:00:00 +0300</pubDate>
				<link>/post/2012/04/08/sjlj-and-exception-handling</link>
				<guid isPermaLink="true">/post/2012/04/08/sjlj-and-exception-handling</guid>
			</item>
		
			<item>
				<title>CS373 finished</title>
				<description>&lt;p&gt;I&#39;m done with CS373, having implemented some quite nice algorithms that can be used to real-life robot navigation and after a surprisingly well done final exam (my hopes weren&#39;t so high after the AI class, so I&#39;m positively surprised).&lt;/p&gt;

&lt;p&gt;It was so fun I signed up for two more classes starting April 16. - Applied Cryptography and Design of Computer Programs. Can&#39;t wait to have moar edjuukation.&lt;/p&gt;
</description>
				<pubDate>Sun, 08 Apr 2012 00:00:00 +0300</pubDate>
				<link>/post/2012/04/08/cs373-finished</link>
				<guid isPermaLink="true">/post/2012/04/08/cs373-finished</guid>
			</item>
		
	</channel>
</rss>

